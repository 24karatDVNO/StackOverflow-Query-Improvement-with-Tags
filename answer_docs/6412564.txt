<p>You should (severely!) test application performance for your application against both models (separate schema and separate database). If one proves unacceptable, go with the other. With the obvious said, the only truly compelling reason to use one form over the other ties in to the "add-on" functionality you describe. If this can be an "add-on" to multiple different systems, if you want a single add-on instance to be used by all installed and supported "base" applications, then you'd pretty much want to have that functionality encapsulated within its own database instance, so that it could be shared/accessed by any/all such instances.</p>

<p>Just as a thought-exercise, if you wanted (or had) to have the add-on functionality be stored only in the "first" application instance, with that code referenced by all subsequently installed instances, a solution supporting it could be based on <strong>synonyms</strong> (introduced in SQL 2005). Upon installation of a "base" app, a check would have to be made determining if and where the "add-on" code was found, and if it is found the necessary synonyms would be built referencing its hosting database. A similar installation routine would be required for when the add-on is installed, to identify and update all supported databases. (Its an intriguing idea, but separate database would be a better solution as regards to long-term maintenance and management.)</p>