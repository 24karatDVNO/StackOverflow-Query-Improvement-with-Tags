<p>UML is all about communicating a design decision to those that need to know is clear and concise manner. If it is advantageous to the clarity of this aim then using an actor to represent a sub part of the design then do it. So long as you make it very clear that this is what you are communicating and that both are part of the same model.</p>

<p>As an example: I have experience in designing and coding embedded systems where blocks of code might be running on different processors/controllers or even in a different enclosure. But they are all part of the same application and therefore design model. Another way of looking at it on say, a windows machine, is an application that relies on a windows service for it's normal operation. The service might be an actor to the GUI application and the application might be an actor to the service.</p>

<p>@sfinnie is right in principle, it is sometimes useful to communicate things outside of this rule. After all, you'll never have to compile your UML, just explain it ;) .</p>