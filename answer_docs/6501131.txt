<p>I've never used CMake, so I really can't say anything about that.  The best that I can offer is a program that we have at school called 'makemake', which automatically makes Makefiles - <a href="http://www.cs.rit.edu/~swm/makemake/" rel="nofollow">http://www.cs.rit.edu/~swm/makemake/</a>  It's not a very advanced program, but it gets the job done.  On the plus side, it's incredibly easy to use - simply do 'makemake > Makefile' in the directory and you have a Makefile which will build and link all the source files in that directory(C and C++).  On the bright side, if you ever add more files, you just run makemake again and you have a new makefile.  On the downside, there's no way to keep any custom targets that you've done from one generated makefile to the next.</p>

<p>As for 'one size fits all' makefiles, while you could definitely do that, it takes away from the purpose of the 'make' command in the first place - which is to keep track of the files last modified time, and thus only re-compile the files that have recently changed, or depend on header files that have just changed(although to generate the correct you can use 'makedepend' - <a href="http://www.x.org/archive/X11R7.5/doc/man/man1/makedepend.1.html" rel="nofollow">http://www.x.org/archive/X11R7.5/doc/man/man1/makedepend.1.html</a> ).  You could use what you currently have plus makedepend in order to make a self-updating makefile. </p>