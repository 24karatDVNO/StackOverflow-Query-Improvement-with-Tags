<p>As a replacement for xsd.exe, <a href="http://xsd2code.codeplex.com/" rel="nofollow">Xsd2Code</a> is a much more fully featured class generator. It can add methods to the generated classes to both serialize, and deserialize from Xml.</p>

<p>Following is an example of the serialize/deserialize methods generated by Xsd2Code:</p>

<pre><code>    /// &lt;summary&gt;
    /// Serializes current EntityBase object into an XML document
    /// &lt;/summary&gt;
    // &lt;returns&gt;string XML value&lt;/returns&gt;
    public virtual string Serialize() {
        System.IO.StreamReader streamReader = null;
        System.IO.MemoryStream memoryStream = null;
        try {
            memoryStream = new System.IO.MemoryStream();
            Serializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally {
            if (streamReader != null) {
                streamReader.Dispose();
            }
            if (memoryStream != null) {
                memoryStream.Dispose();
            }
        }
    }

    /// &lt;summary&gt;
    /// Deserializes workflow markup into an EntityBase object
    /// &lt;/summary&gt;
    // &lt;param name="xml"&gt;string workflow markup to deserialize&lt;/param&gt;
    // &lt;param name="obj"&gt;Output EntityBase object&lt;/param&gt;
    // &lt;param name="exception"&gt;output Exception value if deserialize failed&lt;/param&gt;
    // &lt;returns&gt;true if this XmlSerializer can deserialize the object; otherwise, false&lt;/returns&gt;
    public static bool Deserialize(string xml, out T obj, out System.Exception exception) {
        exception = null;
        obj = default(T);
        try {
            obj = Deserialize(xml);
            return true;
        }
        catch (System.Exception ex) {
            exception = ex;
            return false;
        }
    }

    public static bool Deserialize(string xml, out T obj) {
        System.Exception exception = null;
        return Deserialize(xml, out obj, out exception);
    }

    public static T Deserialize(string xml) {
        System.IO.StringReader stringReader = null;
        try {
            stringReader = new System.IO.StringReader(xml);
            return ((T)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
        }
        finally {
            if (stringReader != null) {
                stringReader.Dispose();
            }
        }
    }
</code></pre>