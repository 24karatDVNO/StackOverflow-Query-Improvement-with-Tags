<p>I've come up with a solution, although I think it's still <em>quite</em> the hack to actually have fade working. I also tested with a pure WPF application and the window will still only fade when <em>not</em> overlapping its parent window. If anyone has a better solution than the code below, please let me know!</p>

<pre><code>public class WindowBase : Window
{
    private bool hasFadeCompleted = false;

    protected override void OnClosing(CancelEventArgs e)
    {
        if (this.hasFadeCompleted)
        {
            base.OnClosing(e);
            return;
        }

        e.Cancel = true;

        var hWnd = new WindowInteropHelper(this).Handle;
        User32.AnimateWindow(hWnd, 1, AnimateWindowFlags.AW_BLEND | AnimateWindowFlags.AW_HIDE);

        Task.Factory.StartNew(() =&gt;
        {
            this.Dispatcher.Invoke(new Action(() =&gt;
            {
                this.hasFadeCompleted = true;
                this.Close();
            }), DispatcherPriority.Normal);
        });
    }
}

public static class User32
{
    [DllImport("user32.dll")]
    public static extern bool AnimateWindow(IntPtr hWnd, int time, uint flags);
}

public static class AnimateWindowFlags
{
    public const uint AW_HOR_POSITIVE = 0x00000001;
    public const uint AW_HOR_NEGATIVE = 0x00000002;
    public const uint AW_VER_POSITIVE = 0x00000004;
    public const uint AW_VER_NEGATIVE = 0x00000008;
    public const uint AW_CENTER = 0x00000010;
    public const uint AW_HIDE = 0x00010000;
    public const uint AW_ACTIVATE = 0x00020000;
    public const uint AW_SLIDE = 0x00040000;
    public const uint AW_BLEND = 0x00080000;
}
</code></pre>

<p>I'm still surprised that this hasn't been an issue for anyone else.</p>