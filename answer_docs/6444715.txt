<p>Just inspired of <code>sholte</code>'s very straightforward (and correct) answer: I'll just demonstrate how easy it will be to extend it to handle arbitrary items, like:</p>

<pre><code>In []: s= array([.3, .4, .3]).cumsum().searchsorted(sample(54))
In []: c, _= histogram(s, bins= arange(4))
In []: [item* c[i] for i, item in enumerate('abc')]
Out[]: ['aaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbbbbbbbbb', 'cccccccccccccccc']
</code></pre>

<p><strong>Update</strong>:<br>
Based on the feedback of <code>phant0m</code>, it turns out that an even more straightforward solution can be implemented based on <code>multinomial</code>, like:</p>

<pre><code>In []: s= multinomial(54, [.3, .4, .3])
In []: [item* s[i] for i, item in enumerate('abc')]
Out[]: ['aaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbbbbbbbbbb', 'cccccccccccc']
</code></pre>

<p>IMHO here we have a nice summary of <code>empirical cdf</code> and <code>multinomial</code> based sampling yielding similar results. So, in a summary, pick it up one which suits best for your purposes.</p>