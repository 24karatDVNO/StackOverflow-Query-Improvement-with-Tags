<p>I'm really embarrassed about this... I thought I had checked everything and tried as many approaches as I could think of, but I didn't think <strong><em>the memory spike was from the TextBox itself</em></strong>. That's what causes the spike. If you remove all of the bindings and fluff and just have the TextBoxes, <em>even with their UndoLimit set to zero and limiting the MaxLength</em>, the program's memory still spikes by 15Mb+ after a dozen or so edits of the TextBox's contents. So because the bindings also updated the Textbox, they triggered this spike. I know default controls have to cover a wide variety of uses, but as my first C#/WPF program, I didn't realize how bloated they actually are in this case. I'm off to write my own TextBox Control and to remind myself to never assume too much when it comes to this. But hey, at least I can put my custom binding code to the side now!</p>