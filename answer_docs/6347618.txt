<p>if you are sending the user to a new "place" then use the history token as described by Peter. If you are trying to do it another way or embed the edit you can try:</p>

<p>Creating a custom dynamic link and interface for a callback
- CustomLink
- CustomLinkCallback</p>

<p>CustomLink can extend composite or whatever you want to create your custom widget
It can simple be an Anchor. you may want to make the generic  so you know what method to call on the object to display any text (anchor.setText(obj.getName());</p>

<pre><code>CustomLink&lt;T extends MyObject&gt; extends Composite {
  CustomLink(final T obj, final CustomLinkCallback&lt;T&gt; callback){
    Anchor a = new Anchor(obj.getName());
    a.addClickHandler(new ClickHandler(){
      public void onClick(ClickEvent event){
        callback.onClick(obj);
      }
    });
    setWidget(a);
  }
}


public interface CustomLinkCallback&lt;T extends MyObject&gt; {
 public void onClick(T obj);
}
</code></pre>

<p>Then you can use the CustomLink:</p>

<pre><code>add(new CustomLink(myObj, new CustomLinkCallback(){
  public void onClick(O obj){
    showEdit(obj);//where show edit can call obj.getId()
  }
});
</code></pre>

<p>This will give you a good bit of flexibility to do whatever you want.</p>

<p>Again, this is just a different way of going about things and whatever you do depends on your situation and needs so hopefully the history token approach works for you :)</p>