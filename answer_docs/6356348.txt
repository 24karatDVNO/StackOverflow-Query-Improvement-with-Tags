<p>I modified Mac's solution and replaced Enum type by database table, my table is:</p>

<p><img src="https://i.stack.imgur.com/8Olow.jpg" alt="enter image description here"></p>

<p>In my application I am renting room according Gender preferences.
My model with GenderRadios property:</p>

<pre><code>public partial class Room
{
 public RadioButtonListViewModel GenderRadios { get; set; }
 //...
}
</code></pre>

<p>In room controller, I am preparing Radios:</p>

<pre><code>   private void fillRadios(Room room)
    {         
        List&lt;Gender&gt; genders = fre.Genders.ToList();
        room.GenderRadios= new RadioButtonListViewModel();
        room.GenderRadios.ListItems = new List&lt;RadioButtonListItem&gt;();
        foreach (Gender gender in genders)
            room.GenderRadios.ListItems.Add(new RadioButtonListItem { Text = gender.Name, Value = gender.Id, Selected= (room.GenderId == gender.Id)});
    }
</code></pre>

<p>finally, I use it in the view for creating room:</p>

<pre><code>&lt;tr&gt; 
&lt;td&gt;Gender&lt;/td&gt;
   &lt;%= Html.RadioButtonListFor(m =&gt; m.GenderRadios, "GenderRadiosForRoomCreate")%&gt;         
&lt;/tr&gt;
</code></pre>

<p>and for editing room:</p>

<pre><code>&lt;tr&gt; 
&lt;td&gt;Gender&lt;/td&gt;
    &lt;%= Html.RadioButtonListFor(m =&gt; m.GenderRadios, "GenderRadiosForRoomEdit")%&gt;         
&lt;/tr&gt;
</code></pre>

<p>Create room html will look like:</p>

<pre><code>&lt;td id="GenderRadisoForRoomCreate_Container"&gt;
&lt;input id="GenderRadisoForRoomCreate_Any" name="GenderRadisoForRoomCreate_value" value="1" type="radio"&gt;&lt;label for="GenderRadisoForRoomCreate_Any"&gt;Any&lt;/label&gt;
&lt;input id="GenderRadisoForRoomCreate_Female" name="GenderRadisoForRoomCreate_value" value="2" type="radio"&gt;&lt;label for="GenderRadisoForRoomCreate_Female"&gt;Female&lt;/label&gt;
&lt;input id="GenderRadisoForRoomCreate_Male" name="GenderRadisoForRoomCreate_value" value="3" type="radio"&gt;&lt;label for="GenderRadisoForRoomCreate_Male"&gt;Male&lt;/label&gt;
&lt;/td&gt;
</code></pre>

<p>When room created:</p>

<pre><code>[HttpPost]
public ActionResult RoomCreate(Room room, FormCollection formValues, int? GenderRadiosForRoomCreate_value, int? SmokingRadiosForRoomCreate_value)
{
    room.GenderId = GenderRadiosForRoomCreate_value;
    room.SmokingId = SmokingRadiosForRoomCreate_value;
//...
}
</code></pre>

<p>Here is the helpers class:</p>

<pre><code>public class RadioButtonListViewModel
{
    public int Id { get; set; }

    private int selectedValue;
    public int SelectedValue
    {
        get { return selectedValue; }
        set
        {
            selectedValue = value;
            UpdatedSelectedItems();
        }
    }

    private void UpdatedSelectedItems()
    {
        if (ListItems == null)
            return;

        ListItems.ForEach(li =&gt; li.Selected = Equals(li.Value, SelectedValue));
    }

    private List&lt;RadioButtonListItem&gt; listItems;
    public List&lt;RadioButtonListItem&gt; ListItems
    {
        get { return listItems; }
        set
        {
            listItems = value;
            UpdatedSelectedItems();
        }
    }
}

public class RadioButtonListItem
{
    public bool Selected { get; set; }

    public string Text { get; set; }



    public int Value { get; set; }

    public override string ToString()
    {
        return Value.ToString();
    }
}



public static class HtmlHelperExtensions
{
    /* 
     tagBase: I used tagBase string for building other tag's Id or Name on this. i.e. for tagBase="GenderRadiosForRoomCreate" 
        &lt;td id="GenderRadisoForRoomCreate_Container"&gt;
        &lt;input id="GenderRadisoForRoomCreate_Any" name="GenderRadisoForRoomCreate_value" value="1" type="radio"&gt;&lt;label for="GenderRadisoForRoomCreate_Any"&gt;Any&lt;/label&gt;
        &lt;input id="GenderRadisoForRoomCreate_Female" name="GenderRadisoForRoomCreate_value" value="2" type="radio"&gt;&lt;label for="GenderRadisoForRoomCreate_Female"&gt;Female&lt;/label&gt;
        &lt;input id="GenderRadisoForRoomCreate_Male" name="GenderRadisoForRoomCreate_value" value="3" type="radio"&gt;&lt;label for="GenderRadisoForRoomCreate_Male"&gt;Male&lt;/label&gt;
        &lt;/td&gt;     
    */
    public static string RadioButtonListFor&lt;TModel&gt;(this HtmlHelper&lt;TModel&gt; htmlHelper, Expression&lt;Func&lt;TModel, RadioButtonListViewModel&gt;&gt; expression, String tagBase) where TModel : class
    {
        return htmlHelper.RadioButtonListFor(expression, tagBase, null);
    }

    public static string RadioButtonListFor&lt;TModel&gt;(this HtmlHelper&lt;TModel&gt; htmlHelper, Expression&lt;Func&lt;TModel, RadioButtonListViewModel&gt;&gt; expression, String tagBase, object htmlAttributes) where TModel : class
    {
        return htmlHelper.RadioButtonListFor(expression, tagBase, new RouteValueDictionary(htmlAttributes));
    }

    public static string RadioButtonListFor&lt;TModel&gt;(this HtmlHelper&lt;TModel&gt; htmlHelper, Expression&lt;Func&lt;TModel, RadioButtonListViewModel&gt;&gt; expression, String tagBase, IDictionary&lt;string, object&gt; htmlAttributes) where TModel : class
    {        
        var inputName = tagBase;
        RadioButtonListViewModel radioButtonList = GetValue(htmlHelper, expression);

        if (radioButtonList == null)
            return String.Empty;

        if (radioButtonList.ListItems == null)
            return String.Empty;


        var containerTag = new TagBuilder("td");
        containerTag.MergeAttribute("id", inputName + "_Container");                
        foreach (var item in radioButtonList.ListItems)
        {
            var radioButtonTag = RadioButton(htmlHelper, inputName, new SelectListItem{Text=item.Text, Selected = item.Selected, Value = item.Value.ToString()}, htmlAttributes);

            containerTag.InnerHtml += radioButtonTag;
        }

        return containerTag.ToString();
    }

    public static string RadioButton(this HtmlHelper htmlHelper, string name, SelectListItem listItem,
                         IDictionary&lt;string, object&gt; htmlAttributes)
    {
        var inputIdSb = new StringBuilder();
        inputIdSb.Append(name);

        var sb = new StringBuilder();

        var builder = new TagBuilder("input");
        if (listItem.Selected) builder.MergeAttribute("checked", "checked");
        builder.MergeAttribute("type", "radio");
        builder.MergeAttribute("value", listItem.Value);
        builder.MergeAttribute("id", inputIdSb.ToString() + "_" + listItem.Text);    
        builder.MergeAttribute("name", name + "_value");
        builder.MergeAttributes(htmlAttributes);
        sb.Append(builder.ToString(TagRenderMode.SelfClosing));
        sb.Append(RadioButtonLabel(inputIdSb.ToString(), listItem.Text, htmlAttributes));
        return sb.ToString();
    }

    public static string RadioButtonLabel(string inputId, string displayText,
                                 IDictionary&lt;string, object&gt; htmlAttributes)
    {
        var labelBuilder = new TagBuilder("label");
        labelBuilder.MergeAttribute("for", inputId + "_" + displayText);
        labelBuilder.MergeAttributes(htmlAttributes);
        labelBuilder.InnerHtml = displayText;

        return labelBuilder.ToString(TagRenderMode.Normal);
    }


    public static TProperty GetValue&lt;TModel, TProperty&gt;(HtmlHelper&lt;TModel&gt; htmlHelper, Expression&lt;Func&lt;TModel, TProperty&gt;&gt; expression) where TModel : class
    {
        TModel model = htmlHelper.ViewData.Model;
        if (model == null)
        {
            return default(TProperty);
        }
        Func&lt;TModel, TProperty&gt; func = expression.Compile();
        return func(model);
    }
}
</code></pre>