<p>The problem is that you are using the condition variable incorrectly. A condition variable is just a notification mechanism, not a flag. It has no internal state other than the list of threads currently waiting. Consequently, if <code>main()</code> has not actually executed as far as the <code>pthread_cond_wait()</code> call when the other threads call <code>pthread_cond_signal()</code> then the signal is lost, and <code>main()</code> will wait forever.</p>

<p>You need to use a separate flag associated with the condition variable. <code>main()</code> can then check this flag, and only wait if the flag is not set. Also, it must check this flag in a loop, to ensure that "spurious wakeups" are handled, where <code>pthread_cond_wait()</code> returns <strong>without</strong> a corresponding signal. The same applies to the notification between <code>threadOne</code> and <code>threadTwo</code>.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;pthread.h&gt;
#include &lt;semaphore.h&gt;

pthread_mutex_t gLock;
pthread_cond_t gCondition;
int gFlag=0;

pthread_mutex_t mLock;
pthread_cond_t mCondition;
int mFlag=0;

void initialize()
{
    pthread_mutex_init(&amp;gLock, NULL);
    pthread_cond_init (&amp;gCondition, NULL);
    pthread_mutex_init(&amp;mLock, NULL);
    pthread_cond_init (&amp;mCondition, NULL);
}

void * threadOne(void * msg)
{
    printf("%s \n",(char*) msg);
    printf("before conditional wait\n");

    pthread_mutex_lock(&amp;gLock);
    while(!gFlag)
    {
        pthread_cond_wait(&amp;gCondition,&amp;gLock);
    }
    pthread_mutex_unlock(&amp;gLock);

    printf("i am again in thread 1\n");

    pthread_mutex_lock(&amp;mLock);
    mFlag=1;
    pthread_cond_signal(&amp;mCondition);
    pthread_mutex_unlock(&amp;mLock);

}

void * threadTwo(void * msg)
{
    printf("%s\n",(char*)msg);
    printf("before conditional release\n");
    pthread_mutex_lock(&amp;gLock);
    gFlag=1;
    pthread_cond_signal(&amp;gCondition);
    pthread_mutex_unlock(&amp;gLock);
    printf("i am again in thread 2\n");

}

int main()
{
    pthread_t thread1;
    pthread_t thread2;

    char * msg1="I am in thread 1";
    char * msg2="I am in thread 2";
    initialize();

    pthread_create(&amp;thread1,NULL,threadOne,(void*) msg1);
    pthread_create(&amp;thread2,NULL,threadTwo,(void*) msg2);

    pthread_mutex_lock(&amp;mLock);
    while(!mFlag)
    {
        pthread_cond_wait(&amp;mCondition,&amp;mLock);
    }
    pthread_mutex_unlock(&amp;mLock);

    printf("main exits here");

    return 0;
}
</code></pre>