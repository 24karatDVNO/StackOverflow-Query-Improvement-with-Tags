<p>Well, my first thought is that the <code>catch</code> block can <em>only</em> make a difference if an <code>IOException</code> is thrown - so we know for sure that that's happening.  And likewise we know that without the catch block, this exception will propagate out of the <code>wfsGetCapabilities</code> method (presumably you added an appropriate <code>throws</code> declaration when you removed the catch block).</p>

<p>So chances are, in the "working" case, the calling code is catching the IOException higher up and handling it in such a way that your method appears to work judging by the output.  Of course your method didn't work, and threw an exception, but perhaps there's a default fallback (or similar) which is invoked in an error case?</p>

<p>So that's the "strange" part hopefully dealt with.  As for the "problem" part, if you're getting a <code>NullPointerException</code> thrown with the catch block, but not without it, it's clear that your catch block logic is not quite right and is causing this problem.  From what you've posted it doesn't look like any of those immediate references would be null - take a look at the stack trace and determine from which line the exception is thrown, then fix it as you would any other NPE.</p>