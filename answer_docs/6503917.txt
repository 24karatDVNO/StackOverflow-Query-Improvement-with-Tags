<p>I found a solution for Glassfish myself: Basically I just deploy a class (<code>SharedClassLoader</code>) which inherits from <code>URLClassLoader</code> as a shared library jar in the above mentioned directory. Then I use this classloader as a bootstrap: On calling the web service, the classloader hierarchy is extended as follows: A <code>SharedClassLoader</code> for an URL is instantiated if it does not exist yet and it is added as a delegate to the <code>DelegatingClassLoader</code> in the classloader tree. By doing this for every web service with the same <code>SharedClassLoader</code> instance, it acts as a bootstrap to pull in more class loading. The jar that <code>SharedClassLoader</code> refers to can also be deployed with one of the web services, because Glassfish unpacks the containers to <code>$AS_HOME/domains/domain1/applications/APPLICATION_NAME/LIBRARY_NAME.jar</code>.</p>

<p>I hope this helps anyone having the same problem. I solved this problem for my Bachelor Thesis. If anyone needs more information, just ask, I can send you my thesis.</p>