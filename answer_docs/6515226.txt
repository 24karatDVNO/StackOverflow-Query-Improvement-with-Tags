<p>Neither approach you list is inherently more secure than the other.  If you go with a TCP socket then the danger is that someone notices that the server is listening for TCP connections, connects to it, and works out your data exchange protocol.  If you go with the web-application approach then the danger is that someone discovers the website URL, makes it past your filtering, and is able to establish (or hijack) an authenticated session.  </p>

<p>Either one requires the attacker to execute the same basic steps (discover that the service exists, connect/access the service, convince the service that they have rights to perform protected operations).  Either one also requires that you either know what you are doing or thoroughly do your homework in order to create a system that is truly secure.</p>

<p>So in that sense, I'd suggest going with whichever approach you are more familiar with.  Of course, it's worth considering that there is probably a wider range of prebuilt security libraries and tools to choose from if you go the web application route.  For instance, there are probably a number of Java Filter implementations that can let you specify IP-based blacklist and whitelist parameters, and many servers will include a prebuilt framework for handling user authentication, and so on.  </p>