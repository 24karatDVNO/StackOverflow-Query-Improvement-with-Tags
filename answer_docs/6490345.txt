<pre><code>(define (partial-sums s)
  (let loop ((current 0) (s s))
    (if (empty-stream? s) '()
        (let ((v (+ current (head s))))
          (cons-stream v (loop v (tail s)))))))
</code></pre>

<p>this </p>

<pre><code>(partial-sums '(1 2 3 4 5 6 7 8 9))
</code></pre>

<p>prints</p>

<pre><code>(1 3 6 10 15 21 28 36 45)
</code></pre>

<p>after defining</p>

<pre><code>(define empty-stream? null?)
(define tail cdr)
(define head car)
(define cons-stream cons)
</code></pre>