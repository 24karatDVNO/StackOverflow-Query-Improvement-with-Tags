<p>My answer to <a href="https://stackoverflow.com/questions/5032810/c-ef-and-the-repository-pattern-where-to-put-the-objectcontext-in-a-solution-wi/5032924#5032924">C#/EF and the Repository Pattern: Where to put the ObjectContext in a solution with multiple repositories?</a> provides an implementation of a <code>RepositoryProvider</code> that works with a single instance of an <code>ObjectContext</code>.  You could use the code the same way, with a LINQ-to-SQL <code>DataContext</code> instead of an EF <code>ObjectContext</code>.  The benefit of the <code>RepositoryProvider</code> over Ninject, is that the <code>RepositoryProvider</code> implementation is not bound to a specific DI framework, and can itself be configured in any DI framework.</p>

<p>In addition, you can manage creation and scoping of the <code>DataContext</code> to either a Thread or a WebRequest (such as in @BrokenGlass's answer with <code>HttpContext.Current.Items</code>) by using the <code>DataContextFactory</code> class from <strong><a href="http://www.koders.com/csharp/fidBC1B80CBB6B3F5548FABBEC95A76EAF0D6875C77.aspx" rel="nofollow noreferrer">here</a></strong>.</p>