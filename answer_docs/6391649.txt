<p>Read 16 bits. Assuming CHAR_BIT is 8 (the usual) that's 2 bytes:</p>

<pre><code>size_t chk;
unsigned char data16[2];
chk = fread(data16, 2, 1, file);
if (chk != 1) {
    /* handle error */
}
</code></pre>

<p>Now, depending on endianness issues, just ignore the right 4 of those 16 bits read:</p>

<pre>
     data16 has, for instance: 01000101 11101011 (data16[0] == 0x45; data16[1] == 0xeb)
     and you want these bits:  ^^^^^.^^ ^..^^^.^
     so ... mask and shift!
</pre>

<pre><code>/* mask and shift, bit by bit */
data12[0] = 0;
data12[0] |= !!(data16[0] &amp; (1 &lt;&lt; 7)) &lt;&lt; 3;
data12[0] |= !!(data16[0] &amp; (1 &lt;&lt; 6)) &lt;&lt; 2;
data12[0] |= !!(data16[0] &amp; (1 &lt;&lt; 5)) &lt;&lt; 1;
data12[0] |= !!(data16[0] &amp; (1 &lt;&lt; 4)) &lt;&lt; 0;
data12[1] = 0;
data12[1] |= !!(data16[0] &amp; (1 &lt;&lt; 3)) &lt;&lt; 7;
data12[1] |= !!(data16[0] &amp; (1 &lt;&lt; 1)) &lt;&lt; 6;
data12[1] |= !!(data16[0] &amp; (1 &lt;&lt; 0)) &lt;&lt; 5;
data12[1] |= !!(data16[1] &amp; (1 &lt;&lt; 7)) &lt;&lt; 4;
data12[1] |= !!(data16[1] &amp; (1 &lt;&lt; 4)) &lt;&lt; 3;
data12[1] |= !!(data16[1] &amp; (1 &lt;&lt; 3)) &lt;&lt; 2;
data12[1] |= !!(data16[1] &amp; (1 &lt;&lt; 2)) &lt;&lt; 1;
data12[1] |= !!(data16[1] &amp; (1 &lt;&lt; 0)) &lt;&lt; 0;
</code></pre>