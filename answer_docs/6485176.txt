<pre><code>    pushl %ebp      
    movl %esp, %ebp
</code></pre>

<ul>
<li>save ebp register on the stack</li>
<li>move (copy) the content of register esp into the register ebp</li>
</ul>

<p>The "style" of the piece of code is so that source is the first argument and destination the second; in the intel style you would see something like</p>

<pre><code>    push ebp
    mov  ebp, esp
</code></pre>

<p>This is the plain explanation of those lines of code. The meaning depends. Usually it is a common prolog for functions generated by a high level language (e.g. C), respecting some calling convention. The epilog should look like</p>

<pre><code>    movl %ebp, %esp
    popl %ebp
    ret
</code></pre>

<p>Room for local variables can be "created" on stack by decrementing esp, and using ebp to access the data, preserving the normal usage of esp e.g. for another call to another function (return address is pushed on stack), and avoiding overwriting of the local variables: the memory between the decremented esp and the base ebp is something like a "reserved area" on stack that the current function can use.</p>

<p>Since each entered function preserve both ebp and esp, recursive function call (until the stack limit is reached) are rather natural in this calling convention mechanism, and nested function can be called <em>ad libitum</em> (until the stack ends!).</p>