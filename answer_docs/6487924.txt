<p>The <code>self</code> argument to <code>__call__</code> will be populated with the instance the decorated method is being called on. There's no way to access the decorator object from here - <code>__call__</code> is a bound method, and what you're asking for would require it to be, in effect, 'doubly bound'. Python doesn't support this, so the decorator instance gets replaced with the decorated function's first argument.</p>

<p>The easiest way to work around this is to use nested functions, as @Chris recommends.</p>