<p>Tcl's quite thoroughly embeddable (as long as you remember to call <code>Tcl_FindExecutable</code> before <code>Tcl_CreateInterp</code>) so you could do it that way, using a small amount of Python code to prepare Tcl scripts that you execute in the same process. That'll be fast and reliable (multiprocess stuff requires context switches for communication and has more failure modes) and minimize the amount of extra code required.</p>

<p>The only gotcha coming from Python would be that Tcl interpreters (i.e., the handles returned by <code>Tcl_CreateInterp</code>) are <em>very</em> strongly bound to the current thread; you cannot call them safely from other threads (because of the amount of use of thread-specific data inside the implementation in order to reduce the number of global locks). While we could debate the differences, it's in general just a different way of doing things; it's only when interfacing things together like this that you actually have to care.
If your Python code is actually single-threaded anyway, you can skip the complexity and just go straight to the simplest possible thing with direct access; unsafe at one level, but safe at another.</p>