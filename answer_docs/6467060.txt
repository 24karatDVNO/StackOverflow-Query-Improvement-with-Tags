<p>I modified Tomas Lyckens code to return a MvcHtmlString instead of just a string. This makes sure the output is HTML, not escaped as text. I also xml-documented it nicely. Thanks to Tomas who did all the real work.</p>

<pre><code>    /// &lt;summary&gt;
    /// Returns an HTML submit button (enclosed in its own form) that contains the virtual path of the specified action.
    /// &lt;/summary&gt;
    /// &lt;param name="helper"&gt;The HTML helper instance that this method extends.&lt;/param&gt;
    /// &lt;param name="buttonText"&gt;The visible text of the button.&lt;/param&gt;
    /// &lt;param name="action"&gt;The name of the action.&lt;/param&gt;
    /// &lt;param name="controller"&gt;The name of the controller.&lt;/param&gt;
    /// &lt;param name="routeValues"&gt;An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static MvcHtmlString ActionButton(this HtmlHelper helper, string buttonText, string action, string controller, object routeValues)
    {
        string a = (new UrlHelper(helper.ViewContext.RequestContext)).Action(action, controller, routeValues);

        var form = new TagBuilder("form");
        form.Attributes.Add("method", "get");
        form.Attributes.Add("action", a);

        var input = new TagBuilder("input");
        input.Attributes.Add("type", "submit");
        input.Attributes.Add("value", buttonText);

        form.InnerHtml = input.ToString(TagRenderMode.SelfClosing);

        return MvcHtmlString.Create(form.ToString(TagRenderMode.Normal));
    } 
</code></pre>