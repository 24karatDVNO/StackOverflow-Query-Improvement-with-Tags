<p>There aren't any "clever" ways to do this <em>efficiently</em> AFAIK.  Just write a simple parser for your particular enum and be done with it.  Of course there's the limitation that this will only apply for a single enum and will not work for all enums in general.  C doesn't have mechanisms in place to do this like other languages, it is too low level.</p>

<p>For the heck of it, here's an example of a hand-written "classical" DFA to parse this <code>MyEnum</code>:</p>

<pre><code>typedef enum
{
    MyEnum_foo,
    MyEnum_bar,
    MyEnum_baz,
} MyEnum;

/**
 * M -&gt; y -&gt; E -&gt; n -&gt; u -&gt; m -&gt; _ -&gt; f -&gt; o -&gt; o
 *                                 -&gt; b -&gt; a -&gt; r
 *                                           -&gt; z
 */

MyEnum parse_MyEnum(const char *str)
{
    int state = 0;
    MyEnum result;
    if (str == 0) { /* handle null pointer error */ }
    for ( ; ; )
    {
        char c = *str++;
        switch (state)  /* case sensitive parse */
        {
        case 0:
            /* we could jump to state 7 with the
               appropriate check here but I won't :) */
            switch (c)
            {
            case 'M': state = 1; break;
            default: goto error_state;
            }
            break;
        case 1:     /* M */
            switch (c)
            {
            case 'y': state = 2; break;
            default: goto error_state;
            }
            break;
        case 2:     /* My */
            switch (c)
            {
            case 'E': state = 3; break;
            default: goto error_state;
            }
            break;
        case 3:     /* MyE */
            switch (c)
            {
            case 'n': state = 4; break;
            default: goto error_state;
            }
            break;
        case 4:     /* MyEn */
            switch (c)
            {
            case 'u': state = 5; break;
            default: goto error_state;
            }
            break;
        case 5:     /* MyEnu */
            switch (c)
            {
            case 'm': state = 6; break;
            default: goto error_state;
            }
            break;
        case 6:     /* MyEnum */
            switch (c)
            {
            case '_': state = 7; break;
            default: goto error_state;
            }
            break;
        case 7:     /* MyEnum_ */
            switch (c)
            {
            case 'f': state = 8; break;
            case 'b': state = 11; break;
            default: goto error_state;
            }
            break;
        case 8:     /* MyEnum_f */
            switch (c)
            {
            case 'o': state = 9; break;
            default: goto error_state;
            }
            break;
        case 9:     /* MyEnum_fo */
            switch (c)
            {
            case 'o': state = 10; break;
            default: goto error_state;
            }
            break;
        case 10:    /* MyEnum_foo */
            switch (c)
            {
            case '\0': result = MyEnum_foo; goto accept_state;
            default: goto error_state;
            }
            break;
        case 11:    /* MyEnum_b */
            switch (c)
            {
            case 'a': state = 12; break;
            default: goto error_state;
            }
            break;
        case 12:    /* MyEnum_ba */
            switch (c)
            {
            case 'r': state = 13; break;
            case 'z': state = 14; break;
            default: goto error_state;
            }
            break;
        case 13:    /* MyEnum_bar */
            switch (c)
            {
            case '\0': result = MyEnum_bar; goto accept_state;
            default: goto error_state;
            }
            break;
        case 14:    /* MyEnum_baz */
            switch (c)
            {
            case '\0': result = MyEnum_baz; goto accept_state;
            default: goto error_state;
            }
            break;
        default:
            /* we shouldn't be here */
            assert(0);
        }
    }
error_state:
    /* handle error */
    result = (MyEnum)-1;
accept_state:
    return result;
}
</code></pre>