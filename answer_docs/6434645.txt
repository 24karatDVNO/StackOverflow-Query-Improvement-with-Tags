<p>First of all, Spring/Hibernate are not really intended for batch processing.  Instead, check out either <a href="http://www.talend.com/index.php" rel="nofollow">Talend</a> or <a href="http://www.pentaho.com/" rel="nofollow">Pentaho</a> (if you are into open source), or any of a huge (massive!) variety of commercial tools.  Either of these tools can be used to automatically generate a lump of Java code that will do exactly what you need (including insert optimization, elegant error handling, etc).</p>

<p>Ok, let's assume that you really, really want to make Spring/Hibernate do batch processing.  You have a couple of different issues - first, the Hibernate session lifecycle means that objects loaded expect to be associated to the live session.  You can use the session flush() to force the changes to propagate to the database.  Session close() will wipe everything out.  Objects that are already loaded can only be reattached to a new session with difficulty (usually it's easier to just reload the object).  If you don't close()/flush() your session, eventually you will (probably) run out of memory.  You can fix that by adding a Hibernate 2nd level cache... but that will just make things more complex and slow it down.</p>

<p>There is no real reason not to just do each insertion within an independent Hibernate session (open, do work, close).  It won't be as fast as a dedicated tool, but it's simple, will work fine, and is more or less as good as you'll get.</p>