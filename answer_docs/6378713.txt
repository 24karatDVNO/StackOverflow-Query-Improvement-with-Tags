<p>In this class the main focus appears to be that it integrates correctly with Amazon's web services. Since that web service is not something you own, you shouldn't mock it, because you don't have intimate knowledge of how it works. <a href="http://www.mockobjects.com/2008/11/only-mock-types-you-own-revisited.html" rel="nofollow">"Only mock types you own"</a>, <a href="http://www.mockobjects.com/2007/04/test-smell-everything-is-mocked.html" rel="nofollow">"don't mock third-party libraries"</a> etc.</p>

<p>Here are some ways to approach the problem:</p>

<p><strong>Write a test which connects to the <em>real</em> web service over the network</strong>, perhaps searching for some very popular book which you can trust will be around for years to come. This gives good assurance that you are using the service correctly, but it's also subject to many false positives - for example sometimes the network might be down or then the data in the remote system changes. Thus you will also need tests which...</p>

<p><strong>Write tests against static data files</strong>, which are based on data from the real web service. To get the test data, you could manually do requests to the web service and write the responses to file*. You will need to mock the network connection (either using a stub which does no networking, or by starting up an embedded web server in the tests and connecting to it instead of the real URL). This way you can easily test all kinds of corner cases and error conditions, and the data will always be available and stay the same, regardless of what happens to the real web service. One caveat is that if the API of the real web service changes, these tests will not notice it, so you will also need some tests written against the real web service (as mentioned above).</p>

<p><sub>* For example, once I used cron and a little shell script to download every few minutes data from a web service, which contained ever changing schedule information. Gathering such data for a period of a few weeks was very useful as test data. From that data I hand-crafted static responses which contained all kinds of special cases which I noticed in the real data. It was also useful for setting up a fake web service and a "time machine" which replayed that earlier captured data, so that our system could be used without access to the real web service.</sub></p>