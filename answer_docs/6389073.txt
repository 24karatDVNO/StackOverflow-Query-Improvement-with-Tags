<p>A few years ago I was in the same situation. The problem included dynamic columns, subheadings, cells, everything. A typical table would be around 1000 rows and 50 columns (that's 50,000 cells!). The original implementation used a <code>GridView</code> and performed horribly. I rewrote the view to use a <code>Repeater</code>, a very light-weight looping control, with <code>Literal</code> controls. That reigned in a bit of the madness vs. 100% <code>StringBuilder</code>. I combined that with a bunch of static methods which returned string representations for standard html bits (kind of like ASP.NET MVC's "html helpers"), as well as keeping the object model completely isolated. It was all very fast (I forget, but I think the way the <code>Repeater</code> and <code>Literal</code> controls are rendered is directly to the response stream, so performance was comparable to <code>StringBuilder</code>, perhaps even better).</p>

<p>Even the above will be complex, and is akin to your own approach. But the key to maintaining sanity is to keep the different pieces separate (object model, html generation, and dynamic binding). It's almost like building your own ad-hoc framework. But for serious jobs like this, you need to get nitty-gritty when confined to web browsers.</p>