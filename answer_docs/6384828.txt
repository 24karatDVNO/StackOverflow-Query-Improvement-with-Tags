<p>Use this code to override Struts's StrutsConversionErrorInterceptor...</p>

<pre><code>public class MyConversionErrorInterceptor extends AbstractInterceptor {

    private static final long serialVersionUID = 1L;

    public static final String ORIGINAL_PROPERTY_OVERRIDE = "original.property.override";

    protected Object getOverrideExpr(ActionInvocation invocation, Object value) {
         ValueStack stack = invocation.getStack();

            try {
                stack.push(value);

                return "'" + stack.findValue("top", String.class) + "'";
            } finally {
                stack.pop();
            }
    }

    @Override
    public String intercept(ActionInvocation invocation) throws Exception {

        ActionContext invocationContext = invocation.getInvocationContext();
        Map&lt;String, Object&gt; conversionErrors = invocationContext.getConversionErrors();
        ValueStack stack = invocationContext.getValueStack();

        HashMap&lt;Object, Object&gt; fakie = null;

        BaseAction baseAction = (BaseAction) invocation.getAction();
        String buttonName = baseAction.getButtonName();

        for (Map.Entry&lt;String, Object&gt; entry : conversionErrors.entrySet()) {
            String propertyName = entry.getKey();
            Object value = entry.getValue();

            if (shouldAddError(propertyName, value)) {
                String message = XWorkConverter.getConversionErrorMessage(propertyName, stack);

                Object action = invocation.getAction();
                if (action instanceof ValidationAware) {
                    ValidationAware va = (ValidationAware) action;
                      if(buttonName.equalsIgnoreCas("Next")){
                          va.addFieldError(propertyName, message);
                      }
                }

                if (fakie == null) {
                    fakie = new HashMap&lt;Object, Object&gt;();
                }
                 if(buttonName.equalsIgnoreCas("Next")){
                     fakie.put(propertyName, getOverrideExpr(invocation, value));
                 }
            }
        }

        if (fakie != null) {
            // if there were some errors, put the original (fake) values in
            // place right before the result
            stack.getContext().put(ORIGINAL_PROPERTY_OVERRIDE, fakie);
            invocation.addPreResultListener(new PreResultListener() {
                public void beforeResult(ActionInvocation invocation, String resultCode) {
                    Map&lt;Object, Object&gt; fakie = (Map&lt;Object, Object&gt;) invocation.getInvocationContext().get(ORIGINAL_PROPERTY_OVERRIDE);

                    if (fakie != null) {
                        invocation.getStack().setExprOverrides(fakie);
                    }
                }
            });
        }

        return invocation.invoke();
    }

    protected boolean shouldAddError(String propertyName, Object value) {

        if (value == null) {
            return false;
        }

        if ("".equals(value)) {
            return false;
        }

        if (value instanceof String[]) {
            String[] array = (String[]) value;

            if (array.length == 0) {
                return false;
            }

            if (array.length &gt; 1) {
                return true;
            }

            String str = array[0];

            if ("".equals(str)) {
                return false;
            }
        }

        return true;

    }

}
</code></pre>

<p>You can specify you button names on which you want validation to fire. In above code I have used <strong>"Next"</strong> in code you can see</p>

<p><strong>if(buttonName.equalsIgnoreCas("Next"))</strong></p>