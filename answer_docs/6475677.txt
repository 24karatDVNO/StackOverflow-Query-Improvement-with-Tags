<p>While this approach is sound from an architectural point of view, in the reality of iOS it has a terrible effect on performance (it has been attempted before and did not end well). iOS caches pre-rendered bits of tableview cells as much as possible, so performing runtime modifications of the layout and appearance of different cells in a way that the designers of the UIKit did not anticipate would destroy that caching, and performance would suffer. </p>

<p>Take a look at how <a href="http://cocoawithlove.com/2010/12/uitableview-construction-drawing-and.html" rel="nofollow">Matt Gallagher handles custom cell drawing</a>, his approach has been pseudo-blessed by Apple at WWDC this year. Also, watch the "Tips and tricks to improve responsiveness" and "Understanding UIKit rendering" <a href="http://developer.apple.com/videos/wwdc/2011/" rel="nofollow">sessions from WWDC</a>, as they address real world techniques for improving performance of UITableView.</p>