<p>You can't create simple universal converter.</p>

<p>One way - Use reflection. You can convert objects automaticly. But it's not so simple. You'll have to write some code.</p>

<p>Another way - You can use very simple converter. But you have to describe convertion  rules for every case. Commonly no need to write a lot of code for convertion. Here is example for your case</p>

<pre><code>public static class ConvertExtension //exstension for convertion
{
    //automatic convertion
    //later you define in lambda wich data needs to be converted
    public static T Convert&lt;S, T&gt;(this S source, Action&lt;S, T&gt; convert)
        where S : class
        where T : class
    {
        T target = System.Activator.CreateInstance&lt;T&gt;();
        convert(source, target);
        return target;
    }

    //convert data defined in interface
    //you need copy all fields manually
    public static T Convert&lt;T&gt;(this IData source)
        where T : IData
    {
        T target = System.Activator.CreateInstance&lt;T&gt;();

        target.ID = source.ID;
        target.Name = source.Name;

        return target;
    }
}

public interface IData //Describe common properties
{
    int ID {get; set;}
    string Name {get; set;}
}

class A : IData //Interface already implemented. You just mark classes with interface
{
    public int ID { get; set; }
    public string Name { get; set; }
}

class B : IData
{
    public int ID { get; set; }
    public string Name { get; set; }
    public string Address { get; set; }
}

//example
A a = new A();
B b1 = a.Convert&lt;B&gt;();
B b2 = a.Convert&lt;A, B&gt;((s, t) =&gt; t.ID = s.ID);
</code></pre>