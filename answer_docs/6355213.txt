<p>My "Shallow" object copier is very similar to yours, but the null test is subtly different. It also has a handy extension method wrapper - so it will need to be in a static class.</p>

<pre><code>    /// &lt;summary&gt;
    /// Copy an object to destination object, only matching fields will be copied
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
    /// &lt;param name="sourceObject"&gt;An object with matching fields of the destination object&lt;/param&gt;
    /// &lt;param name="destObject"&gt;Destination object, must already be created&lt;/param&gt;
    public static void ShallowCopyTo&lt;T&gt;(this object sourceObject, ref T destObject)
    {
        Copy&lt;T&gt;(sourceObject,ref destObject);
    }
    /// &lt;summary&gt;
    /// Copy an object to destination object, only matching fields will be copied
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
    /// &lt;param name="sourceObject"&gt;An object with matching fields of the destination object&lt;/param&gt;
    /// &lt;param name="destObject"&gt;Destination object, must already be created&lt;/param&gt;
    public static void Copy&lt;T&gt;(object sourceObject, ref T destObject)
    {
        //  If either the source, or destination is null, return
        if (sourceObject == null || destObject == null)
            return;

        //  Get the type of each object
        Type sourceType = sourceObject.GetType();
        Type targetType = destObject.GetType();

        //  Loop through the source properties
        foreach (PropertyInfo p in sourceType.GetProperties())
        {
            //  Get the matching property in the destination object
            PropertyInfo targetObj = targetType.GetProperty(p.Name);
            //  If there is none, skip
            if (targetObj == null)
                continue;

            //  Set the value in the destination
            targetObj.SetValue(destObject, p.GetValue(sourceObject, null), null);
        }
    }
</code></pre>

<p>However, I also have a deep copier, but this only works with serializable objects, so look into the code generation you use from the EDMX, I don't think it will work with the EF classes directly, but does with the POCO generated classes.</p>

<pre><code>/// &lt;summary&gt;
/// Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx
/// 
/// Provides a method for performing a deep copy of an object.
/// Binary Serialization is used to perform the copy.
/// &lt;/summary&gt;

public static class ObjectCopier
{
    /// &lt;summary&gt;
    /// Perform a deep Copy of the object.
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;The type of object being copied.&lt;/typeparam&gt;
    /// &lt;param name="source"&gt;The object instance to copy.&lt;/param&gt;
    /// &lt;returns&gt;The copied object.&lt;/returns&gt;
    public static T Clone&lt;T&gt;(this T source)
    {
        if (!typeof(T).IsSerializable)
        {
            throw new ArgumentException("The type must be serializable.", "source");
        }

        // Don't serialize a null object, simply return the default for that object
        if (Object.ReferenceEquals(source, null))
        {
            return default(T);
        }

        IFormatter formatter = new BinaryFormatter();
        Stream stream = new MemoryStream();
        using (stream)
        {
            formatter.Serialize(stream, source);
            stream.Seek(0, SeekOrigin.Begin);
            return (T)formatter.Deserialize(stream);
        }
    }
</code></pre>